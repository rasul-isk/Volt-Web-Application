name: CI
run-name: Deploy to ${{ inputs.deploy_target }} by @${{ github.actor }}

# Controls when the workflow will run
on:
  # run whenever there is a pull request targeting the following branches
  pull_request:
    branches:
      - main
      - develop
      
  # run whenever there is a push request to the following branches
  push:
    branches:
      - main
      - develop
      - 'feature/**'
      - 'bugfix/**'
      - 'hotfix/**'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  # This workflow contains a single job called "test"
  test:
          
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    services:
      db:
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        image: postgres:latest
        ports: ['5432:5432']
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    strategy:
      matrix:
        otp: ['25']
        elixir: ['1.14.1']
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "🖥️ The workflow is now ready to test your code on the runner."
      # Checks-out your repository under $GITHUB_WORKSPACE, so the job can access it
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Sets up an Erlang/OTP environment
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ matrix.otp }}
          elixir-version: ${{ matrix.elixir }}
      - name: Get dependencies
        run: mix deps.get
      - name: Compile application
        run: mix compile.elixir
      - name: Reset database
        run: MIX_ENV=test mix ecto.reset
      - name: Runs application tests
        run: mix test
      - run: echo "🍏 This job's status is ${{ job.status }}."
